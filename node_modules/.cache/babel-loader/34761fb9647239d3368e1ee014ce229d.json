{"ast":null,"code":"// import { GiExtractionOrb } from 'react-icons/gi';\nimport { LOAD_PRODUCTS, SET_LISTVIEW, SET_GRIDVIEW, UPDATE_SORT, SORT_PRODUCTS, UPDATE_FILTERS, FILTER_PRODUCTS, CLEAR_FILTERS } from '../actions';\n\nconst filter_reducer = (state, action) => {\n  if (action.type === LOAD_PRODUCTS) {\n    let maxPrice = action.payload.map(product => product.price);\n    maxPrice = Math.max(...maxPrice);\n    return { ...state,\n      all_products: [...action.payload],\n      filtered_products: [...action.payload],\n      filters: { ...state.filters,\n        max_price: maxPrice,\n        price: maxPrice\n      }\n    };\n  }\n\n  if (action.type === SET_GRIDVIEW) {\n    return { ...state,\n      grid_view: true\n    };\n  }\n\n  if (action.type === SET_LISTVIEW) {\n    return { ...state,\n      grid_view: false\n    };\n  }\n\n  if (action.type === UPDATE_SORT) {\n    return { ...state,\n      sort: action.payload\n    };\n  }\n\n  if (action.type === SORT_PRODUCTS) {\n    const {\n      sort,\n      filtered_products\n    } = state;\n    let tempProducts = [...filtered_products];\n\n    if (sort === 'price-lowest') {\n      // long sort version\n      tempProducts = tempProducts.sort((a, b) => {\n        if (a.price < b.price) {\n          return -1;\n        }\n\n        if (a.price > b.price) {\n          return 1;\n        }\n\n        return 0;\n      });\n    }\n\n    if (sort === 'price-highest') {\n      // short sort version\n      tempProducts = tempProducts.sort((a, b) => b.price - a.price);\n    }\n\n    if (sort === 'name-a') {\n      tempProducts = tempProducts.sort((a, b) => {\n        return a.name.localeCompare(b.name);\n      });\n    }\n\n    if (sort === 'name-z') {\n      tempProducts = tempProducts.sort((a, b) => {\n        return b.name.localeCompare(a.name);\n      });\n    }\n\n    return { ...state,\n      filtered_products: tempProducts\n    };\n  }\n\n  if (action.type === UPDATE_FILTERS) {\n    const {\n      name,\n      value\n    } = action.payload;\n    return { ...state,\n      filters: { ...state.filters,\n        [name]: value\n      }\n    };\n  }\n\n  if (action.type === FILTER_PRODUCTS) {\n    const {\n      all_products\n    } = state;\n    const {\n      text,\n      category,\n      company,\n      color,\n      price,\n      shipping\n    } = state.filters;\n    let tempProducts = [...all_products]; // filtering\n\n    if (text) {\n      tempProducts = tempProducts.filter(product => {\n        return product.name.toLowerCase().startsWith(text);\n      });\n    }\n\n    if (category !== 'all') {\n      tempProducts = tempProducts.filter(product => product.category === category);\n    }\n\n    if (company !== 'all') {\n      tempProducts = tempProducts.filter(product => product.company === company);\n    }\n\n    if (color !== 'all') {\n      tempProducts = tempProducts.filter(product => {\n        return product.colors.find(c => c === color);\n      });\n    }\n\n    tempProducts = tempProducts.filter(product => product.price <= price);\n\n    if (shipping) {\n      tempProducts = tempProducts.filter(product => product.shipping === true);\n    }\n\n    return { ...state,\n      filtered_products: tempProducts\n    };\n  }\n\n  if (action.type === CLEAR_FILTERS) {\n    return { ...state,\n      filters: { ...state.filters,\n        text: '',\n        company: 'all',\n        category: 'all',\n        color: 'all',\n        price: state.filters.max_price,\n        shipping: false\n      }\n    };\n  }\n\n  throw new Error(`No Matching \"${action.type}\" - action type`);\n};\n\nexport default filter_reducer;","map":{"version":3,"sources":["/Users/asso/Desktop/assomatic/assomatic/Projects/30_Comfy-Slot-Store/src/reducers/filter_reducer.js"],"names":["LOAD_PRODUCTS","SET_LISTVIEW","SET_GRIDVIEW","UPDATE_SORT","SORT_PRODUCTS","UPDATE_FILTERS","FILTER_PRODUCTS","CLEAR_FILTERS","filter_reducer","state","action","type","maxPrice","payload","map","product","price","Math","max","all_products","filtered_products","filters","max_price","grid_view","sort","tempProducts","a","b","name","localeCompare","value","text","category","company","color","shipping","filter","toLowerCase","startsWith","colors","find","c","Error"],"mappings":"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","sourcesContent":["// import { GiExtractionOrb } from 'react-icons/gi';\nimport {\n  LOAD_PRODUCTS,\n  SET_LISTVIEW,\n  SET_GRIDVIEW,\n  UPDATE_SORT,\n  SORT_PRODUCTS,\n  UPDATE_FILTERS,\n  FILTER_PRODUCTS,\n  CLEAR_FILTERS,\n} from '../actions';\n\nconst filter_reducer = (state, action) => {\n  if (action.type === LOAD_PRODUCTS) {\n    let maxPrice = action.payload.map((product) => product.price);\n    maxPrice = Math.max(...maxPrice);\n\n    return {\n      ...state,\n      all_products: [...action.payload],\n      filtered_products: [...action.payload],\n      filters: {\n        ...state.filters,\n        max_price: maxPrice,\n        price: maxPrice,\n      },\n    };\n  }\n  if (action.type === SET_GRIDVIEW) {\n    return { ...state, grid_view: true };\n  }\n  if (action.type === SET_LISTVIEW) {\n    return { ...state, grid_view: false };\n  }\n  if (action.type === UPDATE_SORT) {\n    return { ...state, sort: action.payload };\n  }\n  if (action.type === SORT_PRODUCTS) {\n    const { sort, filtered_products } = state;\n    let tempProducts = [...filtered_products];\n    if (sort === 'price-lowest') {\n      // long sort version\n      tempProducts = tempProducts.sort((a, b) => {\n        if (a.price < b.price) {\n          return -1;\n        }\n        if (a.price > b.price) {\n          return 1;\n        }\n        return 0;\n      });\n    }\n    if (sort === 'price-highest') {\n      // short sort version\n      tempProducts = tempProducts.sort((a, b) => b.price - a.price);\n    }\n    if (sort === 'name-a') {\n      tempProducts = tempProducts.sort((a, b) => {\n        return a.name.localeCompare(b.name);\n      });\n    }\n    if (sort === 'name-z') {\n      tempProducts = tempProducts.sort((a, b) => {\n        return b.name.localeCompare(a.name);\n      });\n    }\n    return { ...state, filtered_products: tempProducts };\n  }\n  if (action.type === UPDATE_FILTERS) {\n    const { name, value } = action.payload;\n    return { ...state, filters: { ...state.filters, [name]: value } };\n  }\n  if (action.type === FILTER_PRODUCTS) {\n    const { all_products } = state;\n    const { text, category, company, color, price, shipping } = state.filters;\n\n    let tempProducts = [...all_products];\n    // filtering\n    if (text) {\n      tempProducts = tempProducts.filter((product) => {\n        return product.name.toLowerCase().startsWith(text);\n      });\n    }\n    if (category !== 'all') {\n      tempProducts = tempProducts.filter(\n        (product) => product.category === category\n      );\n    }\n    if (company !== 'all') {\n      tempProducts = tempProducts.filter(\n        (product) => product.company === company\n      );\n    }\n    if (color !== 'all') {\n      tempProducts = tempProducts.filter((product) => {\n        return product.colors.find((c) => c === color);\n      });\n    }\n    tempProducts = tempProducts.filter((product) => product.price <= price);\n    if (shipping) {\n      tempProducts = tempProducts.filter(\n        (product) => product.shipping === true\n      );\n    }\n\n    return { ...state, filtered_products: tempProducts };\n  }\n  if (action.type === CLEAR_FILTERS) {\n    return {\n      ...state,\n      filters: {\n        ...state.filters,\n        text: '',\n        company: 'all',\n        category: 'all',\n        color: 'all',\n        price: state.filters.max_price,\n        shipping: false,\n      },\n    };\n  }\n\n  throw new Error(`No Matching \"${action.type}\" - action type`);\n};\n\nexport default filter_reducer;\n"]},"metadata":{},"sourceType":"module"}